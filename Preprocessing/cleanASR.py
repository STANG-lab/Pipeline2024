from pathlib import Path


def clean_to_tsv(raw_path, clean_path):
    # This function takes the raw .srt files generated by whisper and makes the format fit STANGdards
    for file in raw_path.glob("*.srt"):
        with open(file, "r") as f, open(clean_path / Path(file.name.split(".")[0]+".tsv"), "w") as clean_file:
            active_speaker = None
            active_chunk = {}
            for i, line in enumerate(f.readlines()):
                line = line.rstrip("\n")
                if "-->" in line:  # Indicates a timestamp in the .srt format.
                    active_chunk['start'], active_chunk['end'] = line.split(" --> ")
                    active_chunk['start'] = active_chunk['start'].replace(",", ".")
                    active_chunk['end'] = active_chunk['end'].replace(",", ".")  # Reformatting for sensible timestamps.
                new_speaker = line[:10] == "[SPEAKER_0"
                if new_speaker:
                    active_speaker = line[1:11]
                    speaker_idx = i
                    active_chunk["speaker"] = active_speaker
                    active_chunk["text"] = line[14:]
                elif active_speaker is not None and abs(i - speaker_idx) % 4 == 0:
                    active_chunk["speaker"] = active_speaker
                    active_chunk["text"] = line
                if len(active_chunk.keys()) > 3:
                    row = "\t".join(["None", active_chunk["speaker"], active_chunk['start'], active_chunk['end'], active_chunk['text']])
                    # The None at the beginning is the blank task annotation.
                    print(row, file=clean_file)
                    active_chunk = {}  # By constructing this lazily, we only do 1 pass through the file

def clean(raw_path, clean_path):
    for file in raw_path.glob("*.srt"):
        with open(file, "r") as f, open(clean_path / file.name, "w") as clean_file:
            for line in enumerate(f.readlines()):
                pass




# if __name__ == "__main__":
#     clean("../Studies/Example_study")


